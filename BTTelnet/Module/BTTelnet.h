/* Generated by CMunge 0.40 (04 Feb 2003)
 * CMunge Copyright (c) 1999-2002 Robin Watts/Justin Fletcher */

#ifndef _CMUNGE_BTTelnet_H_
#define _CMUNGE_BTTelnet_H_

#include "kernel.h"

#define CMUNGE_VERSION (40)

#define Module_Title		"BTTelnet"
#define Module_Help		"BeyondThoughtTelnet	0.02 (22 Mar 2003) © Leo White"
#define Module_VersionString	"0.02"
#define Module_Version		2
#ifndef Module_Date
#define Module_Date		"22 Mar 2003"
#endif

#ifdef __cplusplus
extern "C" {
#endif


/***************************************************************************
 * Function:     initialise
 * Description:  Initialise the module, setting up vectors, callbacks and
 *               any other parts of the system necessary for the module to
 *               function.
 * Parameters:   tail        = pointer to command line (control terminated)
 *               podule_base = address of podule module was started from, or
 *                             NULL if none
 *               pw          = private word for module
 * On exit:      Return NULL for successful initialisation, or a pointer to
 *               an error block if the module could not start properly.
 **************************************************************************/
_kernel_oserror *initialise(const char *tail, int podule_base, void *pw);


/***************************************************************************
 * Function:     finalise
 * Description:  Finalise the module, shutting down any systems necessary,
 *               freeing vectors and releasing workspace
 * Parameters:   fatal       = fatality indicator; 1 if fatal, 0 if
 *                             reinitialising
 *               podule_base = address of podule module was started from, or
 *                             NULL if none
 *               pw          = private word for module
 * On exit:      Return 0 for successful finalisation, or a pointer to an
 *               error block if module was not shutdown properly.
 **************************************************************************/
_kernel_oserror *finalise(int fatal, int podule_base, void *pw);


/***************************************************************************
 * Description:  SWI handler routine. All SWIs for this module will be
 *               passed to these routines.
 * Parameters:   number = SWI number within SWI chunk (i.e. 0 to 63)
 *               r      = pointer to register block on entry
 *               pw     = private word for module
 * On exit:      Return NULL if SWI handled sucessfully, setting return
 *               register values (r0-r9) in r.
 *               Return error_BAD_SWI for out of range SWIs.
 *               Return an error block for a custom error.
 **************************************************************************/
/* Functions called to handle particular SWI calls */
_kernel_oserror *swi_open(int number, _kernel_swi_regs *r, void *pw);
_kernel_oserror *swi_close(int number, _kernel_swi_regs *r, void *pw);
_kernel_oserror *swi_read(int number, _kernel_swi_regs *r, void *pw);
_kernel_oserror *swi_write(int number, _kernel_swi_regs *r, void *pw);
_kernel_oserror *swi_status(int number, _kernel_swi_regs *r, void *pw);
_kernel_oserror *swi_configure(int number, _kernel_swi_regs *r, void *pw);
/* SWI number definitions */
#define BTTelnet_00 (0x00054cc0)
#undef BTTelnet_Open
#undef XBTTelnet_Open
#define BTTelnet_Open             (0x00054cc0)
#define XBTTelnet_Open            (0x00074cc0)
#undef BTTelnet_Close
#undef XBTTelnet_Close
#define BTTelnet_Close            (0x00054cc1)
#define XBTTelnet_Close           (0x00074cc1)
#undef BTTelnet_Read
#undef XBTTelnet_Read
#define BTTelnet_Read             (0x00054cc2)
#define XBTTelnet_Read            (0x00074cc2)
#undef BTTelnet_Write
#undef XBTTelnet_Write
#define BTTelnet_Write            (0x00054cc3)
#define XBTTelnet_Write           (0x00074cc3)
#undef BTTelnet_Status
#undef XBTTelnet_Status
#define BTTelnet_Status           (0x00054cc4)
#define XBTTelnet_Status          (0x00074cc4)
#undef BTTelnet_Configure
#undef XBTTelnet_Configure
#define BTTelnet_Configure        (0x00054cc5)
#define XBTTelnet_Configure       (0x00074cc5)

/* Special error for 'SWI values out of range for this module' */
#define error_BAD_SWI ((_kernel_oserror *) -1)


/***************************************************************************
 * Function:     eventv
 * Description:  Symbol for entry point to module - NOT a C function.
 *               This name should be used as an argument to
 *               OS_Claim/OS_Release as required, but should never be called
 *               from C.
 **************************************************************************/
extern void eventv(void);


/***************************************************************************
 * Function:     eventvHandler
 * Description:  Event handler routine. Events will be passed to this
 *               routine if they are in the accept list (or all, if no list
 *               was provided).
 * Parameters:   r  = pointer to register block on entry
 *               pw = private word for module
 * On exit:      Update r to alter return values.
 *               Return 0 to claim event (pulling return address from the
 *               stack).
 *               Return non-0 to pass on (returning via r14).
 **************************************************************************/
int eventvHandler(_kernel_swi_regs *r, void *pw);


/***************************************************************************
 * Function:     callback
 * Description:  Symbol for entry point to module - NOT a C function.
 *               This name should be used as an argument to
 *               OS_Claim/OS_Release as required, but should never be called
 *               from C.
 **************************************************************************/
extern void callback(void);


/***************************************************************************
 * Function:     callbackHandler
 * Description:  Generic handler function
 * Parameters:   r  = pointer to register block on entry
 *               pw = private word for module
 * On exit:      Update r to alter return values
 *               Return NULL to return with V clear
 *               Return an error pointer to set V and r0
 **************************************************************************/
_kernel_oserror *callbackHandler(_kernel_swi_regs *r, void *pw);

/* VENEER_SETCARRY can be used on routines which have been marked as capable
 * of having a carry flag returned to return with the carry flag set. All
 * other registers are preserved. */
#define VENEER_SETCARRY ((_kernel_oserror *)2)

/* Error base for this module */
#define ERROR_BASE (0x00818400)
/* Error messages embedded in header, based at &818400 */
extern void __err_failedClaim(void); /* &818400 */
extern void __err_failedInternet(void); /* &818401 */
extern void __err_failedMemory(void); /* &818402 */
#define failedClaim ((_kernel_oserror*)(int)__err_failedClaim)
#define failedInternet ((_kernel_oserror*)(int)__err_failedInternet)
#define failedMemory ((_kernel_oserror*)(int)__err_failedMemory)

#ifdef __cplusplus
}
#endif

#endif
